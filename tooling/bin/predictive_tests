#!/usr/bin/env ruby
# frozen_string_literal: true

# use inline bundler only when executed as standalone script
if __FILE__ == $PROGRAM_NAME
  require 'bundler/inline'

  gemfile do
    source 'https://rubygems.org'

    gem 'gitlab', '~> 5.1'
    gem 'test_file_finder', '~> 0.3'
    # loaded from standard library by gitlab and will stop working on ruby 3.4
    gem 'base64'
    gem 'csv'
  end
end

require 'fileutils'
require 'tmpdir'
require 'json'

require_relative '../lib/tooling/predictive_tests/test_selector'
require_relative '../lib/tooling/predictive_tests/changed_files'
require_relative '../lib/tooling/predictive_tests/mapping_fetcher'

class PredictiveTests # rubocop:disable Gitlab/NamespacedClass -- standalone non rails script
  def initialize(options)
    @with_crystalball_mappings = options[:with_crystalball_mappings]
    @mapping_type = options[:mapping_type] || :described_class
    @with_frontend_fixture_mappings = options[:with_frontend_fixture_mappings]
    @changed_files = options[:changed_files]
    @changed_files_path = options[:changed_files_path]
    @matching_foss_rspec_test_files_path = options[:matching_foss_rspec_test_files_path]
    @matching_ee_rspec_test_files_path = options[:matching_ee_rspec_test_files_path]
    @matching_jest_test_files_path = options[:matching_jest_test_files_path]
    @ci = options[:ci]
    @debug = options[:debug]

    # unlike backend mappings, this file is reused in other ci jobs so it's location needs to be configurable
    @frontend_fixtures_mapping_path = options[:frontend_fixtures_mapping_path] || File.join(
      Dir.tmpdir, 'frontend_fixtures_mapping.json'
    )
  end

  def execute
    logger.info('Running predictive test selection')
    create_output_files
    return if @ci

    puts (rspec_spec_list + js_spec_list).join(' ')
  end

  private

  def logger
    @logger ||= Logger.new($stdout, progname: 'Predictive Tests').tap do |l|
      l.level = if @debug
                  :debug
                else
                  # silence logger locally so output can be used in shell scripts
                  @ci ? :info : :error
                end

      l.formatter = proc do |severity, _datetime, progname, msg|
        # remove datetime to keep more neat cli like output
        "[#{progname}] #{severity}: #{msg}\n"
      end
    end
  end

  def mapping_fetcher
    @mapping_fetcher ||= Tooling::PredictiveTests::MappingFetcher.new(logger: logger)
  end

  def test_mapping_file
    return unless @with_crystalball_mappings

    @test_mapping_file ||= mapping_fetcher.fetch_rspec_mappings(
      File.join(Dir.tmpdir, 'crystalball_mapping.json'),
      type: @mapping_type
    )
  end

  def frontend_fixtures_mapping_file
    return unless @with_frontend_fixture_mappings

    @frontend_fixtures_mapping_file ||= mapping_fetcher.fetch_frontend_fixtures_mappings(
      @frontend_fixtures_mapping_path
    )
  end

  def changed_file_list
    @changed_file_list ||= if @changed_files
                             @changed_files.split(" ")
                           else
                             Tooling::PredictiveTests::ChangedFiles.fetch(
                               frontend_fixtures_file: frontend_fixtures_mapping_file
                             )
                           end
  end

  def test_selector
    @test_selector ||= Tooling::PredictiveTests::TestSelector.new(
      changed_files: changed_file_list,
      rspec_test_mapping_path: test_mapping_file,
      logger: logger
    )
  end

  def rspec_spec_list
    @rspec_spec_list ||= test_selector.rspec_spec_list
  end

  def js_spec_list
    @js_spec_list ||= test_selector.js_spec_list
  end

  # rubocop:disable Gitlab/Json -- non rails
  def create_output_files
    # Used by frontend related pipelines/jobs
    save_output(changed_file_list.join("\n"), @changed_files_path) if valid_file_path?(@changed_files_path)

    # Used by predictive rspec pipelines
    if valid_file_path?(@matching_foss_rspec_test_files_path)
      list = rspec_spec_list.select { |f| f.start_with?("spec/") && File.exist?(f) }
      save_output(list.join(" "), @matching_foss_rspec_test_files_path)
      logger.info("Following foss rspec tests saved: #{JSON.pretty_generate(list)}")
    end

    if valid_file_path?(@matching_ee_rspec_test_files_path)
      list = rspec_spec_list.select { |f| f.start_with?("ee/spec/") && File.exist?(f) }
      save_output(list.join(" "), @matching_ee_rspec_test_files_path)
      logger.info("Following ee rspec tests saved: #{JSON.pretty_generate(list)}")
    end

    return unless valid_file_path?(@matching_jest_test_files_path)

    save_output(js_spec_list.join(" "), @matching_jest_test_files_path)
  end
  # rubocop:enable Gitlab/Json

  def save_output(output, file_path)
    logger.debug("Writing #{file_path}")
    FileUtils.mkdir_p(File.dirname(file_path))
    File.write(file_path, output)
  end

  def valid_file_path?(file_path)
    !(file_path.nil? || file_path.empty?)
  end
end

if __FILE__ == $PROGRAM_NAME
  require 'optparse'

  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

    opts.on('--ci', 'Enable more verbose logging instead of returning list of tests to stdout') do
      options[:ci] = true
    end

    opts.on('--debug', 'Enable debug log level') do
      options[:debug] = true
    end

    opts.on('--changed-files [string]', String, 'Manual space separated list of changed files.') do |value|
      options[:changed_files] = value
    end

    opts.on('--changed-files-path [string]', String, 'Path to save list of calculated changed files') do |value|
      options[:changed_files_path] = value
    end

    opts.on('--with-crystalball-mappings', 'Download crystalball mappings for rspec tests') do
      options[:with_crystalball_mappings] = true
    end

    opts.on('--mapping-type [string]', String, 'Crystalball mapping type, coverage or described_class') do |value|
      options[:mapping_type] = value
    end

    opts.on('--with-frontend-fixture-mappings', 'Download frontend fixture mappings') do
      options[:with_frontend_fixture_mappings] = true
    end

    opts.on('--frontend-fixtures-mapping-path [string]', String, 'Path to save frontend fixtures mappings') do |value|
      options[:frontend_fixtures_mapping_path] = value
    end

    opts.on('--matching-foss-rspec-test-files-path [string]', String, 'Path for list of foss rspec tests') do |value|
      options[:matching_foss_rspec_test_files_path] = value
    end

    opts.on('--matching-ee-rspec-test-files-path [string]', String, 'Path for list of ee rspec tests') do |value|
      options[:matching_ee_rspec_test_files_path] = value
    end

    opts.on('--matching-jest-test-files-path [string]', String, 'File to save list of matching rspec tests') do |value|
      options[:matching_jest_test_files_path] = value
    end

    opts.on('-h', '--help', 'Show this help message') do
      puts opts
      exit
    end
  end.parse!

  PredictiveTests.new(options).execute
end
