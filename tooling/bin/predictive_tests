#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'

  gem 'gitlab', '~> 5.1'
  gem 'test_file_finder', '~> 0.3'
  # loaded from standard library by gitlab and will stop working on ruby 3.4
  gem 'base64'
  gem 'csv'
end

require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

  opts.on('--select-tests', 'Run test selection logic') do
    options[:select_tests] = true
  end

  opts.on('--export-predictive-backend-metrics', 'Export predictive test metrics for rspec') do
    options[:export_rspec_metrics] = true
  end

  opts.on('--export-predictive-frontend-metrics', 'Export predictive test metrics for frontend') do
    options[:export_jest_metrics] = true
  end

  opts.on('--with-crystalball-mappings', 'Download crystalball mappings for rspec tests') do
    options[:with_crystalball_mappings] = true
  end

  opts.on('--mapping-type [string]', String, 'Crystalball mapping type, coverage or described_class') do |value|
    options[:mapping_type] = value
  end

  opts.on('-h', '--help', 'Show this help message') do
    puts opts
    exit
  end
end.parse!

# Validate at least one option is provided
if [options[:select_tests], options[:export_rspec_metrics], options[:export_jest_metrics]].all?(&:nil?)
  puts <<~MSG
    Error: Please specify one of these flags:
      1. --select-tests
      2. --export-predictive-backend-metrics
      3. --export-predictive-frontend-metrics
  MSG

  exit 1
end

def validate_required_env_variables!(variables)
  variables.select { |key| ENV[key.to_s].to_s.empty? }.tap do |missing_variables|
    next if missing_variables.empty?

    warn "[predictive tests] Missing ENV variable(s): #{missing_variables.join(',')}."
    exit 1
  end
end

if options[:select_tests]
  require_relative '../lib/tooling/predictive_tests/test_selector'
  require_relative '../lib/tooling/predictive_tests/changed_files'
  require_relative '../lib/tooling/predictive_tests/mapping_fetcher'

  validate_required_env_variables!(%w[
    RSPEC_MATCHING_TEST_FILES_PATH
    FRONTEND_FIXTURES_MAPPING_PATH
    RSPEC_MATCHING_JS_FILES_PATH
  ])

  logger = Logger.new($stdout, progname: '[Predictive Tests]')
  logger.info("Running predictive test selection")

  mapping_fetcher = Tooling::PredictiveTests::MappingFetcher.new(logger: logger)
  test_mapping_file = if options[:with_crystalball_mappings]
                        mapping_fetcher.fetch_rspec_mappings(
                          'mapping.json',
                          type: options[:mapping_type] || :described_class
                        )
                      end

  changed_files = Tooling::PredictiveTests::ChangedFiles.fetch(
    frontend_fixtures_file: mapping_fetcher.fetch_frontend_fixtures_mappings(ENV['FRONTEND_FIXTURES_MAPPING_PATH'])
  )
  test_selector = Tooling::PredictiveTests::TestSelector.new(
    changed_files: changed_files,
    rspec_test_mapping_path: test_mapping_file,
    logger: logger
  )

  # Used to generate predictive rspec test pipelines
  File.write(ENV['RSPEC_MATCHING_TEST_FILES_PATH'], test_selector.rspec_spec_list.join(" "))
  # Used by frontend related pipelines/jobs
  File.write(ENV['RSPEC_MATCHING_JS_FILES_PATH'], test_selector.js_spec_list.join(" "))
  File.write(ENV['RSPEC_CHANGED_FILES_PATH'], changed_files.join("\n"))
end

if options[:export_rspec_metrics]
  require_relative '../lib/tooling/predictive_tests/metrics_exporter'

  validate_required_env_variables!(%w[
    GLCI_CRYSTALBALL_MAPPING_DIR
    GLCI_ALL_FAILED_RSPEC_TESTS_FILE
    GLCI_PREDICTIVE_TEST_METRICS_OUTPUT_DIR
  ])

  Tooling::PredictiveTests::MetricsExporter.new(
    rspec_all_failed_tests_file: ENV['GLCI_ALL_FAILED_RSPEC_TESTS_FILE'],
    crystalball_mapping_dir: ENV['GLCI_CRYSTALBALL_MAPPING_DIR'],
    frontend_fixtures_mapping_file: ENV['FRONTEND_FIXTURES_MAPPING_PATH'],
    output_dir: ENV['GLCI_PREDICTIVE_TEST_METRICS_OUTPUT_DIR']
  ).execute
end

if options[:export_jest_metrics]
  require_relative '../lib/tooling/predictive_tests/frontend_metrics_exporter'
  validate_required_env_variables!(%w[
    JEST_MATCHING_TEST_FILES_PATH
    GLCI_JEST_FAILED_TESTS_FILE
    GLCI_PREDICTIVE_TEST_METRICS_OUTPUT_DIR
  ])

  Tooling::PredictiveTests::FrontendMetricsExporter.new(
    rspec_changed_files_path: ENV['RSPEC_CHANGED_FILES_PATH'],
    rspec_matching_js_files_path: ENV['RSPEC_MATCHING_JS_FILES_PATH'],
    jest_failed_test_files_path: ENV['GLCI_JEST_FAILED_TESTS_FILE'],
    output_dir: ENV['GLCI_PREDICTIVE_TEST_METRICS_OUTPUT_DIR']
  ).execute
end
